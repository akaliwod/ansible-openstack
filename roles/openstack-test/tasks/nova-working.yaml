---

- name: Get network IDs
  os_networks_facts:
    cloud: "{{ cloud_name }}"
    filters:
      name: "{{ item }}"
  register: nets
  with_items:
    - "{{ instance.management_net }}"
    - "{{ instance.inside__net }}"
    - "{{ instance.outside_net }}"
  loop_control:
    label: "{{ item }}"


- name: Map network IDs
  set_fact:
    network_id: "{{ network_id | default({}) | combine( {item.item: item.ansible_facts.openstack_networks[0].id} ) }}"
  with_items: "{{ nets.results }}"
  loop_control:
  label: "{{ item.item }}"  

- name: Launch instance
  os_server:
    cloud: "{{ cloud_name }}"
    state: present
    name: "{{ instance.name }}"
    image: "{{ instance.image }}"
    #key_name: "{{ os_key_pair }}"
    #security_groups: all
    flavor: "{{ instance.flavor }}"
    auto_ip: False
    config_drive: True
    userdata: "{{ instance.userdata | default(omit) }}"
    nics:
      - net-id: "{{ network_id[instance.management_net] }}"
        v4-fixed-ip: "{{ instance.management_ip | default({}) }}"
      - net-id: "{{ network_id[instance.inside_net] }}"
        v4-fixed-ip: "{{ instance.inside_ip | default({}) }}"
      - net-id: "{{ network_id[instance.outside_net] }}"
        v4-fixed-ip: "{{ instance.outside_ip | default({}) }}"
    register: instance_created

- name: Give instance some time to launch
  pause:
    seconds: 5
  when: instance_created.changed

- name: Get {{ instance.name }} instance info
  os_server_facts:
    cloud: "{{ cloud_name }}"
    server: "{{ instance.name }}"


- name: Check if floating IP already assigned
  set_fact:
    fip_exists: True
  when: openstack_servers[0].networks[instance.external_net][1] is defined


- name: Add floating IP to instance
  os_floating_ip:
    cloud: "{{ cloud_name }}"
    state: present
    reuse: Yes
    server: "{{ instance.name }}"
    network: "{{ instance.floating_ip_pool }}"
    #nat_destination: "{{ instance.external_net }}"     # Needs Ansible 2.3
    fixed_address: "{{ instance_created.server.networks[instance.external_net][0] }}"
  when: instance.assign_floating_ip and not fip_exists
  ignore_errors: True    # Throws errors on first run because the module has issues
  register: results
  changed_when: results.failed is not defined


- name: Get port information
  os_port_facts:
    cloud: "{{ cloud_name }}"
    filters:
      status: ACTIVE
      device_id: "{{ openstack_servers[0].id }}"
  

- name: Update allowed_address_pairs on instance ports
  os_port:
    cloud: "{{ cloud_name }}"
    state: present
    name: "{{ item.id }}"
    allowed_address_pairs: 
      - ip_address: "0.0.0.0/0"
  with_items: "{{ openstack_ports }}"
  loop_control:
    label: "{{ item.fixed_ips[0].ip_address }}"
  register: ports
  

- name: Get {{ instance.name }} instance info
  os_server_facts:
    cloud: "{{ cloud_name }}"
    server: "{{ instance.name }}"


- name: Add {{ instance.name }} instance to Ansible inventory
  add_host:
    name: "{{ instance.name }}"
    groups: vnf
    ansible_host: "{{ instance_created.server.public_v4 }}"
    ansible_user: "{{ instance.login_user }}"
    ansible_become: True
  when: not instance.assign_floating_ip


- name: Add {{ instance.name }} instance to Ansible inventory w/ floating IP
  add_host:
    name: "{{ instance.name }}"
    groups: vnf
    ansible_host: "{{ openstack_servers[0].networks[instance.external_net][1] }}"
    ansible_user: "{{ instance.login_user }}"
    ansible_become: True
  when: instance_created.changed and instance.assign_floating_ip

    
- name: Show assigned floating IP address 
  debug:
    msg: "Assigned floating IP - {{ openstack_servers[0].networks[instance.external_net][1] }}"
  when: instance.assign_floating_ip
  ignore_errors: True



- name: Wait for VM to come up
  # can only check if floating IP has been assigned. Otherwise there's no direct access
  wait_for: 
    host: "{{ openstack_servers[0].networks[instance.external_net][1] }}"
    state: started
    delay: 30
    timeout: 200
    port: 22
  delegate_to: 127.0.0.1
  when: instance_created.changed and instance.assign_floating_ip

